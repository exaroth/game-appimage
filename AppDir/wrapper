#!/bin/bash

EXECUTABLE=""
PROGRAM_NAME="game"

PROG_REAL_PATH="$APPDIR/game"
RO_WINEPREFIX="$APPDIR/wineprefix"
MNT_WINEPREFIX=/tmp/."${PROGRAM_NAME}".unionfs
RW_WINEPREFIX="$HOME/.wine_prefixes/$PROGRAM_NAME"
OVERRIDE_DIR="/tmp/.${PROGRAM_NAME}_overrides"
export WINELOADER=${WINELOADER:-"$APPDIR/winedata/./wine"}

if [ -z ${RWMODE+x} ]; then
    export RWMODE=0
fi

if [ ! -d "$PROG_REAL_PATH" ]; then
	echo "Missing game directory"
	exit 1
fi

if [ ! -f "$PROG_REAL_PATH/$EXECUTABLE" ]; then 
	echo "Invalid game executable"
	exit 1
fi


# dgVoodoo overrides
# export WINEDLLOVERRIDES="d3dimm,ddraw,glide,glide2x,glide3x=n"
# xdvk overrides
# export WINEDLLOVERRIDES="d3d9,d3d11,d3d8,d3d8,d3d10core,dxgi=n,b"
# export WINEDEBUG=${WINEDEBUG:-"fixme-all"}

# Cleanup override dir in case game wasnt closed properly
if [ -d "$OVERRIDE_DIR" ]; then
    rm -Rf "$OVERRIDE_DIR"
fi

while read -r line; do
  src="$(echo "$line" | cut  -f1 -d ':')"
  dest="$(echo "$line" | cut -f2 -d ':')"
  home=$(eval echo "~$(whoami)")
  dest="${dest//\$HOME/$home}"
  if [ -z "$line" ] || [ -z "$src" ] || [ -z "$dest" ]; then
	  continue
  fi
  if [ ! -e "$APPDIR/overrides/$src" ]; then
    echo "Error: $src not found in override dir"
    continue
  else
    if [ ! -e "$dest" ]; then
        echo "Creating user data at path: $dest"
        mkdir -p $(dirname $dest)
        cp -Rf "$APPDIR/overrides/$src" "$dest"
    fi
    mkdir -p "$OVERRIDE_DIR/$(dirname $src)"
    ln -s "$dest" "$OVERRIDE_DIR/$src"
  fi
done < "$APPDIR"/override_list



if [ "$PROVISION_MODE" -eq 1 ]; then
    export WINEPREFIX="$RW_WINEPREFIX"
    if [ ! -d "$RW_WINEPREFIX" ]; then
        mkdir -p "$RW_WINEPREFIX"
        # we need to copy wine instance temporarily to host filesystem for provisioning
        # as winetricks requires read/write access for downloading patches
        wine_temp_p="/tmp/${PROGRAM_NAME}_wine_temp"
        mkdir -p $wine_temp_p
        cp -Rf "$APPDIR/winedata/wine" "$wine_temp_p"
        WINE="$wine_temp_p/wine" source "$APPDIR/provision_wineprefix.sh"
        rm -Rf "$wine_temp_p"
    fi
else
    if [ ! -d "$APPDIR/wineprefix/drive_c" ]; then
        echo "No wine prefix supplied, exiting..."
        exit 1
    fi
    if [ "$RWMODE" -eq 1 ]; then
        mkdir -p "$MNT_WINEPREFIX" "$RW_WINEPREFIX"
        unionfs-fuse -o use_ino,uid=$UID -ocow "$RW_WINEPREFIX"=RW:"$RO_WINEPREFIX"=RO "$MNT_WINEPREFIX" || exit 1
    else
        mkdir -p "$MNT_WINEPREFIX"
        unionfs-fuse -o use_ino,uid=$UID -ocow "$RO_WINEPREFIX"=RO "$MNT_WINEPREFIX" || exit 1
    fi
    export WINEPREFIX="$MNT_WINEPREFIX"
fi

cleanup ()
{
  echo "Exiting ..."
  kill $(ps -ef | grep "wineserver" | awk '{print $2}' | head -1)
  kill $(ps -ef | grep $PROGRAM_NAME.unionfs | awk '{print $2}' | head -1)
  sleep 1
  fusermount -u "$MNT_WINEPREFIX" > /dev/null
  pkill -9 -f "system32"
  rm -Rf "$OVERRIDE_DIR"
  rm -r "$MNT_WINEPREFIX"
  echo "Done..."
  exit 0
}

WINEPREFIX="$WINEPREFIX" "$WINELOADER" start /d "$PROG_REAL_PATH" "$EXECUTABLE"

while true :
do
    sleep 1
    proc=$(pgrep -f $EXECUTABLE | head -1)
    if [ -z "$proc" ]; then
        cleanup
    fi
done
